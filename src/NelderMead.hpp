#ifndef _NELDER_MEAD_
#define _NELDER_MEAD_

#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "NumericalOptimizer.hpp"

#ifndef A_LFA
#define A_LFA 1
#endif
#ifndef G_AMA
#define G_AMA 2
#endif
#ifndef R_HO
#define R_HO 0.5
#endif
#ifndef S_GMA
#define S_GMA 0.5
#endif

#define END 0x99

class NumericalOptimizer;
class NelderMead : public NumericalOptimizer {
  double alpha;   // Used in reflection
  double gammma;  // Used in expansion
  double rho;     // Used in contraction
  double sigma;   // Used in reduction

  int step;
  int h;  // Index of the worst solution
  int s;  // Index of the second worst solution
  int l;  // Index of the best solution

  int i, j;
  int n_points;
  int dim;
  int i_points;

  double cost_reflection;   // Cost of reflected point
  double cost_expansion;    // Cost of expanded point
  double cost_contraction;  // Cost of contracted point

  double *point_reflection;   // Point generated by reflection
  double *point_expansion;    // Point generated by expansion
  double *point_contraction;  // Point generated by contraction

  double **points;  // Vector where each line will a solution 'dim'-dimentional
  double *best_point;
  double *costs;
  double *centroid;

  double result;               // Temporary double variables
  struct drand48_data buffer;  // To use in random seed

  double error;

  void set_points();
  void sort_points();
  void calculate_centroid();
  double volume();
  void swap(double *&p1, double *&p2);
  void swap(double &p1, double &p2);

  NelderMead() = delete;
  NelderMead(const NelderMead &) = delete;
  NelderMead(NelderMead &&) = delete;
  NelderMead operator=(NelderMead) = delete;
  NelderMead &operator=(NelderMead &&) = delete;

 public:
  int getNumPoints() const override { return n_points; };
  int getDimension() const override { return dim; };
  void reset(int level) override;
  bool isEnd() const override { return step == END; }
  double *run(double _cost) override;

  NelderMead(int _dim, double _error);
  ~NelderMead();
};

#endif
